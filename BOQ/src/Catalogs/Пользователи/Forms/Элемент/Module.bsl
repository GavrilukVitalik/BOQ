
&НаКлиенте
Перем ЗакрытиеРазрешено;

&НаСервере
Процедура ПриСозданииНаСервере ( Отказ, СтандартнаяОбработка )
	
	подготовитьЭлементыФормы ();
	Если ( Объект.Ссылка.Пустая () ) Тогда
		начальноеЗаполнение ();
	Иначе
		заполнитьРеквизиты ();
	КонецЕсли;
	установитьДоступность ( ЭтаФорма );
	
КонецПроцедуры

&НаСервере 
Процедура начальноеЗаполнение ()
	
	Объект.ИдентификаторПользователяИБ = Неопределено;
	Объект.ИдентификаторПользователяСервиса = Неопределено;
	ДоступКИнформационнойБазеРазрешен = Истина;
	Пароль = "";
	ПарольПодтверждение = "";
	АутентификацияСтандартная = Истина;
	ПоказыватьВСпискеВыбора = Истина;
	УстановитьНовыйПароль = Истина;
	ЗащитаОтОпасныхДействий = Истина;
	Язык = Элементы.Язык.СписокВыбора.НайтиПоЗначению ( "Русский" );
	РежимЗапуска = Элементы.РежимЗапуска.СписокВыбора.НайтиПоЗначению ( "Авто" );
	
КонецПроцедуры

&НаСервере 
Процедура подготовитьЭлементыФормы ()
	
	Для каждого мета Из Метаданные.Языки Цикл
		Элементы.Язык.СписокВыбора.Добавить ( мета.Имя, мета.Синоним );
	КонецЦикла;
	Для Каждого режим Из РежимЗапускаКлиентскогоПриложения Цикл
		ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения ( режим );
		ИмяЗначения = Сред ( ПолноеИмяЗначения, СтрНайти ( ПолноеИмяЗначения, "." ) + 1 );
		Элементы.РежимЗапуска.СписокВыбора.Добавить ( ИмяЗначения, Строка ( режим ) );
	КонецЦикла;
	Элементы.РежимЗапуска.СписокВыбора.СортироватьПоПредставлению ();
	ЗаписыватьПароль = Ложь;
	
КонецПроцедуры

&НаСервере 
Процедура заполнитьРеквизиты ()
	
	УстановитьПривилегированныйРежим ( Истина );
	пользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору ( Объект.ИдентификаторПользователяИБ );
	Если ( пользовательИБ <> Неопределено ) Тогда
		АутентификацияOpenID = пользовательИБ.АутентификацияOpenID;
		АутентификацияОС = пользовательИБ.АутентификацияОС;
		АутентификацияСтандартная = пользовательИБ.АутентификацияСтандартная;
		ЗапрещеноИзменятьПароль = пользовательИБ.ЗапрещеноИзменятьПароль;
		Имя = пользовательИБ.Имя;
		ПоказыватьВСпискеВыбора = пользовательИБ.ПоказыватьВСпискеВыбора;
		ПолноеИмя = пользовательИБ.ПолноеИмя;
		ПользовательОС = пользовательИБ.ПользовательОС;
		РежимЗапуска = пользовательИБ.РежимЗапуска;
		Язык = пользовательИБ.Язык;
		ПарольУстановлен = пользовательИБ.ПарольУстановлен;
		Если ( ПарольУстановлен ) Тогда
			Пароль = "1111";
			ПарольПодтверждение = "1111";
		Иначе
			Пароль = "";
			ПарольПодтверждение = "";
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим ( Ложь );
	РольПолныеПрава = ДоступСервер.ПолныеПрава ();
	ДоступКИнформационнойБазеРазрешен = НЕ Объект.Недействителен; 
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗапускаОчистка ( Элемент, СтандартнаяОбработка )
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении ( Элемент )
	
	ДоступКИнформационнойБазеРазрешен = НЕ Объект.Недействителен;
	установитьДоступность ( ЭтаФорма );
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении ( Элемент )
	
	Если ( Имя = "" ) Тогда
		Имя = Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияСтандартнаяПриИзменении ( Элемент )
	
	установитьДоступность ( ЭтаФорма );
	
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияОСПриИзменении ( Элемент )
	
	установитьДоступность ( ЭтаФорма );
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйПарольПриИзменении ( Элемент )
	
	установитьДоступность ( ЭтаФорма );	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура установитьДоступность ( Форма )
	
	элементы = Форма.Элементы;
	элементы.Пароль.ТолькоПросмотр = Форма.ЗапрещеноИзменятьПароль И НЕ Форма.РольПолныеПрава;
	элементы.ПарольПодтверждение.ТолькоПросмотр = Форма.ЗапрещеноИзменятьПароль И НЕ Форма.РольПолныеПрава;
	элементы.СтраницаОсновное.Доступность = Форма.ДоступКИнформационнойБазеРазрешен;
	элементы.Имя.АвтоОтметкаНезаполненного = Форма.ДоступКИнформационнойБазеРазрешен;
	элементы.Пароль.Доступность = Форма.АутентификацияСтандартная;
	элементы.ЗапрещеноИзменятьПароль.Доступность = Форма.АутентификацияСтандартная;
	элементы.ПоказыватьВСпискеВыбора.Доступность = Форма.АутентификацияСтандартная;
	элементы.ПользовательОС.Доступность = Форма.АутентификацияОС;
	элементы.ДоступКИнформационнойБазеРазрешен.Доступность = НЕ Форма.Объект.Недействителен;
	элементы.Пароль.Доступность = Форма.УстановитьНовыйПароль;
	элементы.ПарольПодтверждение.Доступность = Форма.УстановитьНовыйПароль;
	элементы.НадписьПарольСовпадение.Видимость = Форма.УстановитьНовыйПароль;
	элементы.НадписьПарольСовпадение.Заголовок = "";
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере ( Отказ, ТекущийОбъект, ПараметрыЗаписи )
	
	Если ( Модифицированность ) Тогда
		записатьПользователяИБ ( ТекущийОбъект );
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура записатьПользователяИБ ( ТекущийОбъект )
	
	Если ( Объект.ИдентификаторПользователяИБ = ОбщийСервер.ПустойИдентификатор () ) Тогда
		пользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя ();
	Иначе
		пользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору ( ТекущийОбъект.ИдентификаторПользователяИБ );
	КонецЕсли;
	пользовательИБ.АутентификацияOpenID = АутентификацияOpenID;
	пользовательИБ.АутентификацияОС = АутентификацияОС;
    пользовательИБ.АутентификацияСтандартная = АутентификацияСтандартная;
	пользовательИБ.ЗапрещеноИзменятьПароль = ЗапрещеноИзменятьПароль;
	пользовательИБ.Имя = Имя;
	пользовательИБ.ПолноеИмя = ПолноеИмя;
	пользовательИБ.ПоказыватьВСпискеВыбора = ПоказыватьВСпискеВыбора;
	пользовательИБ.ПользовательОС = ПользовательОС;
	пользовательИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения [ РежимЗапуска ];
	пользовательИБ.Язык = Метаданные.Языки [ Язык ];
	пользовательИБ.ЗащитаОтОпасныхДействий = Новый ОписаниеЗащитыОтОпасныхДействий ( ЗащитаОтОпасныхДействий );
	пользовательИБ.АдресЭлектроннойПочты = АдресЭлектроннойПочты;
	пользовательИБ.СохраняемоеЗначениеПароля = Обработки.ИзменитьПароль.ПолучитьХешПароля ( Пароль ); 
	пользовательИБ.Записать ();
	ТекущийОбъект.ИдентификаторПользователяИБ = пользовательИБ.УникальныйИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении ( Элемент )
	
	ЗаписыватьПароль = Истина;
	установитьНадписиПаролей ( Пароль, ПарольПодтверждение );		
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПодтверждениеПриИзменении ( Элемент )
	
	ЗаписыватьПароль = Истина;
	установитьНадписиПаролей ( Пароль, ПарольПодтверждение );	
		
КонецПроцедуры

&НаКлиенте
Процедура установитьНадписиПаролей ( Текст1, Текст2 )
	
	Если ( Текст1 = Текст2 ) Тогда
		Элементы.НадписьПарольСовпадение.Заголовок = "";
	Иначе
		Элементы.НадписьПарольСовпадение.Заголовок = Сообщения.ТекстПоИД ( "ТекстНеСовпадает" );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступКИнформационнойБазеРазрешенПриИзменении ( Элемент )
	
	установитьДоступность ( ЭтаФорма );
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью ( Отказ, ПараметрыЗаписи )
	
	Если ( Пароль = "" ) Тогда
		Если ЗакрытиеРазрешено = Неопределено Тогда
			Отказ = Истина;
			Сообщения.ВопросПоказать ( "НеУказанПароль", , "ВопросНеУказанПароль", ЭтотОбъект );
		КонецЕсли;
	ИначеЕсли ( Пароль <> ПарольПодтверждение ) Тогда
		Отказ = Истина;
		Сообщения.ПредупреждениеПоказать ( "НеСовпадаетПарольИПодтверждение" );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросНеУказанПароль ( Ответ, Парамы ) Экспорт
	
	Если ( Ответ = КодВозвратаДиалога.Да ) Тогда
		ЗаписыватьПароль = Истина;
		ЗакрытиеРазрешено = Истина;
		Записать ();
	КонецЕсли;
	
КонецПроцедуры