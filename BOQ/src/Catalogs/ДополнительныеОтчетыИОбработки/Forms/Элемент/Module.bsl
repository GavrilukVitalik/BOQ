
&НаСервере
Процедура ПриСозданииНаСервере ( Отказ, СтандартнаяОбработка )
	
	Если ( Объект.Ссылка.Пустая () ) Тогда
		начальноеЗаполнение ();
	КонецЕсли;
	заполнитьСписокРазделов ();
	установитьОтборДоступОтчетыИОбработки ();
	
КонецПроцедуры

&НаСервере
Процедура установитьОтборДоступОтчетыИОбработки ()
	
	отбор = ДоступОтчетыИОбработки.Отбор.Элементы.Добавить ( Тип ( "ЭлементОтбораКомпоновкиДанных" ) );
	отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных ( "ОбработкаОтчет" );
	отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	отбор.ПравоеЗначение = Объект.Ссылка;
	
КонецПроцедуры
	
&НаСервере
Процедура начальноеЗаполнение ()
	
	Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
	Если ( Параметры.ЗначенияЗаполнения.Свойство ( "ОбработкаОтчет" ) ) Тогда
		Объект.ОбработкаОтчет = Параметры.ЗначенияЗаполнения.ОбработкаОтчет;
	КонецЕсли;
	Если ( Параметры.ЗначенияЗаполнения.Свойство ( "Раздел" ) ) Тогда
		новаяСтрока = Объект.Разделы.Добавить ();
		новаяСтрока.Раздел = Параметры.ЗначенияЗаполнения.Раздел;
	КонецЕсли;
	Если ( Параметры.ЗначенияЗаполнения.Свойство ( "Родитель" ) ) Тогда
		Объект.Родитель = Параметры.ЗначенияЗаполнения.Родитель; 	
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура заполнитьСписокРазделов ()
	
	сз = Элементы.РазделыРаздел.СписокВыбора;
	сз.Очистить ();
	Для Каждого подсистема Из Метаданные.Подсистемы Цикл
		сз.Добавить ( подсистема.Имя, подсистема.Синоним );                                                       
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьОбработку ( Команда )
	
	д = Новый ДиалогВыбораФайла ( РежимДиалогаВыбораФайла.Открытие );
	д.МножественныйВыбор = ЛОЖЬ;
	д.Фильтр = получитьФильтр ();
	д.Заголовок = Сообщения.ТекстПоИД ( "ВыберитеФайлДляЗагрузки" ) ;
	д.Показать ( Новый ОписаниеОповещения ( "ВыборФайлаДляЗагрузки", ЭтотОбъект ) );

КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляЗагрузки ( Файлы, Парамы ) Экспорт
	
	Если ( Файлы = Неопределено ) Тогда
		Возврат;
	КонецЕсли;
	поместитьВХранилище ( Файлы [ 0 ] );
		
КонецПроцедуры

&НаКлиенте
Процедура поместитьВХранилище ( ИмяФайла )
	
	Если ( ПустаяСтрока ( ИмяФайла ) ) Тогда
		Возврат;
	КонецЕсли;
	файл = Новый Файл ( ИмяФайла ) ;
	п = Новый Структура ();
	п.Вставить ( "ПолноеИмя", файл.ПолноеИмя );
	п.Вставить ( "Имя", файл.Имя );
	файл.НачатьПолучениеРазмера ( Новый ОписаниеОповещения ( "ПолучениеРазмераФайла", ЭтотОбъект, п ) ); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеРазмераФайла ( Размер, Парамы ) Экспорт
	
	Парамы.Вставить ( "Размер", Цел ( Размер / 1024 ) );
	передаваемыеФайлы = Новый Массив ();
	передаваемыеФайлы.Добавить ( Новый ОписаниеПередаваемогоФайла ( Парамы.ПолноеИмя ) );
	НачатьПомещениеФайлов ( Новый ОписаниеОповещения ( "ПомещениеФайлов", ЭтотОбъект, Парамы ), передаваемыеФайлы, , Ложь, УникальныйИдентификатор );  	
	
КонецПроцедуры 

&НаКлиенте                                                                 
Процедура ПомещениеФайлов ( Файлы, Парамы ) Экспорт
	
	Если ( Файлы.Количество () = 0 ) Тогда
		Возврат;
	КонецЕсли;
	поместитьВОбъект ( Файлы, Парамы );
	
КонецПроцедуры

&НаСервере
Процедура поместитьВОбъект ( Файлы, Парамы )
	
	адрес = получитьАдресФайла ( Файлы, Парамы.ПолноеИмя );
	текущийОбъект = РеквизитФормыВЗначение ( "Объект" );
	двоичныеДанные = ПолучитьИзВременногоХранилища ( Адрес );
	текущийОбъект.ХранилищеФайла = Новый ХранилищеЗначения ( двоичныеДанные, Новый СжатиеДанных ( 9 ) );
	текущийОбъект.Информация = " " + Парамы.Имя + ", размер - " + Парамы.Размер + " кБ, загружен - " + ТекущаяДата ();
	текущийОбъект.ДатаИзменения = ТекущаяДата ();
	текущийОбъект.Имя = Парамы.Имя;
	Если Не ЗначениеЗаполнено ( текущийОбъект.Наименование ) Тогда
		текущийОбъект.Наименование = Лев ( Парамы.Имя, СтрДлина ( Парамы.Имя )- 4 );
	КонецЕсли; 
	текущийОбъект.Размер = Парамы.Размер;
	расширение = Прав ( Парамы.Имя, 3 );
	Если ( расширение = "epf" ) Тогда
		текущийОбъект.ОбработкаОтчет = ПредопределенноеЗначение ( "Перечисление.ОбработкаОтчет.Обработка" );
	ИначеЕсли ( расширение = "erf" ) Тогда
		текущийОбъект.ОбработкаОтчет = ПредопределенноеЗначение ( "Перечисление.ОбработкаОтчет.Отчет" );
	КонецЕсли; 
	текущийОбъект.Записать ();
	ЗначениеВРеквизитФормы ( текущийОбъект, "Объект" );
	УдалитьИзВременногоХранилища ( Адрес );
	
КонецПроцедуры

&НаСервере
Функция получитьАдресФайла ( Файлы, ПолноеИмя )
	
	Для Каждого описание Из Файлы Цикл
		Если ( НРег ( описание.ПолноеИмя ) = НРег ( ПолноеИмя ) ) Тогда
			Возврат описание.Хранение;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьОбработку ( Команда )
	
	Если ( Объект.Имя = "" ) Тогда
		Возврат;
	КонецЕсли; 
	п = Новый Структура ();
	п.Вставить ( "Имя", Объект.Имя );
	РаботаСФайлами.Подготовить ( Новый ОписаниеОповещения ( "сохранитьФайлНаДиск", ЭтотОбъект, п ) );
	
КонецПроцедуры

&НаКлиенте
Процедура сохранитьФайлНаДиск ( Результат, Парамы ) Экспорт
	
	оповещение = Новый ОписаниеОповещения ( "НачалоПолученияФайлов", ЭтотОбъект ); 
	описание = Новый ОписаниеПередаваемогоФайла ();
	описание.Имя = Объект.Имя;
	описание.Хранение = поместитьФайлВХранилище ();
	файлы = Новый Массив ();
	файлы.Добавить ( описание );
	д = Новый ДиалогВыбораФайла ( РежимДиалогаВыбораФайла.Сохранение );
	д.МножественныйВыбор = Ложь;
	д.Фильтр = получитьФильтр ();
	д.Заголовок = Сообщения.ТекстПоИД ( "" );;
	д.ПолноеИмяФайла = Парамы.Имя;
	д.Расширение = Прав ( Парамы.Имя, 3 );
	НачатьПолучениеФайлов ( оповещение, файлы, д, Истина );  
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПолученияФайлов ( ПолученныеФайлы, Парамы ) Экспорт
	
	Сообщения.Оповещение ( "ФайлСохранен", , , "СохранениеФайла", БиблиотекаКартинок.СохранитьФайл );  
	 	
КонецПроцедуры

&НаСервере 
Функция поместитьФайлВХранилище ()
	
	текущийОбъект = РеквизитФормыВЗначение ( "Объект" );
	Возврат ПоместитьВоВременноеХранилище ( текущийОбъект.ХранилищеФайла.Получить () );

КонецФункции

&НаКлиенте
Функция получитьФильтр ()
	
	Если ( Объект.ОбработкаОтчет = ПредопределенноеЗначение ( "Перечисление.ОбработкаОтчет.Обработка" ) ) Тогда
		фильтр = Сообщения.ТекстПоИД ( "ОбработкаEPF" );
	ИначеЕсли ( Объект.ОбработкаОтчет = ПредопределенноеЗначение ( "Перечисление.ОбработкаОтчет.Отчет" ) ) Тогда 
		фильтр = Сообщения.ТекстПоИД ( "ОтчетERF" );
	Иначе
		фильтр = "";
	КонецЕсли;
	Возврат фильтр;
	
КонецФункции