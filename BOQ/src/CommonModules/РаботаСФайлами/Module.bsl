
&НаКлиенте 
Процедура Подготовить ( ПроцедураВозврата ) Экспорт
	
	НачатьПодключениеРасширенияРаботыСФайлами ( Новый ОписаниеОповещения ( "ПодключитьРасширение", ЭтотОбъект, ПроцедураВозврата ) );
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьРасширение ( Подключено, ПроцедураВозврата ) Экспорт
	
	Если ( Подключено ) Тогда
		ВыполнитьОбработкуОповещения ( ПроцедураВозврата );
	Иначе
		НачатьУстановкуРасширенияРаботыСФайлами ( Новый ОписаниеОповещения ( "УстановитьРасширение", ЭтотОбъект, ПроцедураВозврата ) );
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширение ( ПроцедураВозврата ) Экспорт
	
	Подготовить ( ПроцедураВозврата );
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьEXCEL ( Знач ФайлEXCEL, Знач СтрокаЗаголовка = 1, НачСтрока = 0, КонСтрока = 0, КолвоСтрокФайла = 0 ) Экспорт  
	
	Перем ТабличныйДокумент, КонечнаяКолонка, ИмяКолонки, Область, ТекущаяОбласть, нСтрока, нКолонка, НоваяСтрокаТФ, ЗначениеЯчейки;
	Перем ТаблицаРезультат;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать ( ФайлEXCEL, СпособЧтенияЗначенийТабличногоДокумента.Значение );    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
	Исключение
		Сообщить ( ОписаниеОшибки (), СтатусСообщения.Внимание );
		Возврат Новый ТаблицаЗначений;
	КонецПопытки;
	КолвоСтрокФайла = ТабличныйДокумент.ВысотаТаблицы;
	КонечнаяКолонка = ТабличныйДокумент.ПолучитьОбласть ().ШиринаТаблицы;
	Если КолвоСтрокФайла = 0 Тогда
		ТабличныйДокумент = Неопределено;
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить ( "НомерСтроки", Новый ОписаниеТипов ( "Число" ), "№", 4 );
	ТаблицаРезультат.Колонки.Добавить ( "Сопоставлено", Новый ОписаниеТипов ( "Булево" ), "Сопоставлено", 1 );
	Для ит = 1 ПО КонечнаяКолонка Цикл
		нКолонка = СтрЗаменить ( ит, Символы.НПП, "" );
		ИмяКолонки = "N" + нКолонка;
		ТаблицаРезультат.Колонки.Добавить ( ИмяКолонки );
	КонецЦикла;
	НоваяСтрокаТФ = ТаблицаРезультат.Добавить ();
	НоваяСтрокаТФ.НомерСтроки = 1;
	Для ит = 1 ПО КонечнаяКолонка Цикл
		нКолонка = СтрЗаменить ( ит, Символы.НПП, "" );
		ИмяКолонки = "N" + нКолонка;
		НоваяСтрокаТФ [ ИмяКолонки ] = ТабличныйДокумент.ПолучитьОбласть ( "R1" + "C" + нКолонка ).ТекущаяОбласть.Текст;
		ШиринаКолонки = ТаблицаРезультат.Колонки [ ИмяКолонки ].Ширина;
		ДлинаСтроки = СтрДлина ( СокрЛП ( НоваяСтрокаТФ [ ИмяКолонки ] ) );
		ТаблицаРезультат.Колонки [ ИмяКолонки ].Ширина = ? ( ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки );
	КонецЦикла;
	НачСтрока = ? ( НачСтрока = 0, 2, НачСтрока );
	КонСтрока = ? ( КонСтрока = 0, КолвоСтрокФайла, КонСтрока );
	Для нСтрока = НачСтрока ПО КонСтрока Цикл
		НоваяСтрокаТФ = ТаблицаРезультат.Добавить ();
		НоваяСтрокаТФ [ 0 ] = нСтрока;
		Для ит = 1 ПО КонечнаяКолонка Цикл
			нКолонка = СтрЗаменить ( ит, Символы.НПП, "" );
			Область = ТабличныйДокумент.ПолучитьОбласть ( "R" + СтрЗаменить ( нСтрока, Символы.НПП, "" ) + "C" + нКолонка );
			ТекущаяОбласть = Область.ТекущаяОбласть;
			Попытка
				ЗначениеЯчейки = ТекущаяОбласть.Значение;
			Исключение
				ЗначениеЯчейки = СокрЛП ( ТекущаяОбласть.Текст );
				Если ЗначениеЗаполнено ( ЗначениеЯчейки ) Тогда
					ЗначениеЯчейки = ПреобразоватьПростоеЗначениеИзСтрокиВТипизованноеЗначение1С ( ЗначениеЯчейки );
					Если ТипЗнч ( ЗначениеЯчейки ) = Тип ( "Строка" ) Тогда
						ЗначениеЯчейки = СокрЛП ( ЗначениеЯчейки );
					КонецЕсли;
				Иначе
					ЗначениеЯчейки = Неопределено;
					Если Область.Рисунки.Количество () > 0 Тогда    // Изображение.
						ЗначениеЯчейки = ПолучитьЗначениеЯчейкиОбластиТабличногоДокументаСКартинками ( Область, нСтрока, нКолонка, "УИД" );
					КонецЕсли;
				КонецЕсли;
			КонецПопытки;
			ИмяКолонки = "N" + нКолонка;
			НоваяСтрокаТФ [ ИмяКолонки ] = ЗначениеЯчейки;
			ШиринаКолонки = ТаблицаРезультат.Колонки [ ИмяКолонки ].Ширина;
			ДлинаСтроки = СтрДлина ( СокрЛП ( НоваяСтрокаТФ [ ИмяКолонки ] ) );
			ТаблицаРезультат.Колонки [ ИмяКолонки ].Ширина = ? ( ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки );
		КонецЦикла;
	КонецЦикла;
	УдалитьКолонкиСНулевойШириной ( ТаблицаРезультат );
	удалитьФайл ( ФайлEXCEL );
	Возврат ТаблицаРезультат;
	
КонецФункции

&НаСервере
Процедура УдалитьКолонкиСНулевойШириной ( ТаблицаРезультат )
	
	Перем МассивПустыхКолонок;
	МассивПустыхКолонок = Новый Массив;
	Для Каждого Колонка ИЗ ТаблицаРезультат.Колонки Цикл
		Если Колонка.Ширина = 0 Тогда
			МассивПустыхКолонок.Добавить ( Колонка.Имя );
		КонецЕсли;
	КонецЦикла;
	Для Каждого ПустаяКолонка ИЗ МассивПустыхКолонок Цикл
		ТаблицаРезультат.Колонки.Удалить ( ПустаяКолонка );
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПреобразоватьПростоеЗначениеИзСтрокиВТипизованноеЗначение1С ( Знач ИсходноеЗначение )
	
	Если НЕ ИсходноеЗначение = "" Тогда
		Если ТолькоЦифрыИЗапятаяВСтроке ( ИсходноеЗначение, Истина, Ложь ) Тогда
			Попытка
				Возврат Число ( ИсходноеЗначение );
			Исключение
				Возврат ИсходноеЗначение
			КонецПопытки;
		Иначе
			Если ВРег ( ИсходноеЗначение ) = "Истина" ИЛИ ВРег ( ИсходноеЗначение ) =  ( "Истина" + Символы.ПС ) ИЛИ ВРег ( ИсходноеЗначение ) = "TRUE" ИЛИ ВРег ( ИсходноеЗначение ) = ( "TRUE" + Символы.ПС ) Тогда
				Возврат Истина;
			ИначеЕсли ВРег ( ИсходноеЗначение ) = "Ложь" ИЛИ  ВРег ( ИсходноеЗначение ) = ( "Ложь" + Символы.ПС ) ИЛИ ВРег ( ИсходноеЗначение ) = "FALSE" ИЛИ ВРег ( ИсходноеЗначение ) = ( "FALSE" + Символы.ПС ) Тогда
				Возврат Ложь;
			Иначе
				Возврат ПреобразоватьИзСтрокиВДату ( ИсходноеЗначение );
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ИсходноеЗначение
	
КонецФункции

&НаСервере
Функция ТолькоЦифрыИЗапятаяВСтроке ( Знач СтрокаПроверки, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина )
	
	Если ТипЗнч ( СтрокаПроверки ) <> Тип ( "Строка" ) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить ( СтрокаПроверки, " ", "" );
	КонецЕсли;
	Если Сред ( СтрокаПроверки, 1, 1 ) = "-" Тогда
		СтрокаПроверки = Сред ( СтрокаПроверки, 2, СтрДлина ( СтрокаПроверки ) );
	КонецЕсли;
	Если ПустаяСтрока ( СтрокаПроверки ) Тогда
		Возврат Истина;
	КонецЕсли;
	Если НЕ УчитыватьЛидирующиеНули Тогда
		Позиция = 1;
		Пока Сред ( СтрокаПроверки, Позиция, 1 ) = "0" Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		СтрокаПроверки = Сред ( СтрокаПроверки, Позиция );
	КонецЕсли;
	Возврат СтрДлина ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( 
	СтрокаПроверки, "0", "" ), "1", "" ), "2", "" ), "3", "" ), "4", "" ), "5", "" ), "6", "" ), "7", "" ), "8", "" ), "9", "" ), ",", "" ) ) = 0;
	
КонецФункции

&НаСервере
Функция ПреобразоватьИзСтрокиВДату ( Знач СтрокаДаты )
	
	Перем ScrptCtrl, OutDate;
	Попытка
		ScrptCtrl = Новый COMОбъект ( "MSScriptControl.ScriptControl" );
		ScrptCtrl.Language = "vbscript";
		OutDate = ScrptCtrl.Eval ( "CDate(""" + СтрокаДаты + """)" );
		Возврат OutDate;
	Исключение
		//Сообщить ( ОписаниеОшибки () );
	КонецПопытки;
	Возврат СтрокаДаты;
	
КонецФункции 

&НаСервере
Функция ПолучитьЗначениеЯчейкиОбластиТабличногоДокументаСКартинками ( Знач Область, Знач нСтрока, Знач нКолонка, Знач ПравилоИмяФайлаКартинки = "УИД" )
	
	Перем Рисунок, ит, ИмяФайлаРисунка;
	Перем ЗначениеЯчейки;
	ит = 0;
	ЗначениеЯчейки = "";
	Для Каждого Рисунок ИЗ Область.Рисунки Цикл
		ит = ит + 1;
		Если ПравилоИмяФайлаКартинки = "УИД" Тогда
			ИмяФайлаРисунка = КаталогВременныхФайлов () + Новый УникальныйИдентификатор () + ".jpg";
		Иначе
			ИмяФайлаРисунка = КаталогВременныхФайлов () + "С" + нСтрока + "К" + нКолонка + ".jpg";
		КонецЕсли;
		Попытка
			Рисунок.Картинка.Записать ( ИмяФайлаРисунка );
			ЗначениеЯчейки = ЗначениеЯчейки + ИмяФайлаРисунка + ? ( ит < Область.Рисунки.Количество (), Символы.ПС, "" );
		Исключение
			// Поле картинки недоступно для чтения.
		КонецПопытки;
	КонецЦикла;
	
	Возврат ЗначениеЯчейки;
	
КонецФункции

&НаСервере
Процедура УдалитьФайл ( ИмяФайла ) Экспорт 
	
	Если ( ИмяФайла = Неопределено ИЛИ ПустаяСтрока ( ИмяФайла ) ) Тогда
		Возврат;
	КонецЕсли;
	ф = Новый Файл ( ИмяФайла );
	Если ( ф.Существует () ) Тогда
		УдалитьФайлы ( ИмяФайла );
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДопОбработкиОтчеты ( Раздел, ОбработкаОтчет ) Экспорт
	
	п = Новый Структура ();
	п.Вставить ( "Раздел", Раздел );
	п.Вставить ( "ОбработкаОтчет", ПредопределенноеЗначение ( "Перечисление.ОбработкаОтчет." + ОбработкаОтчет ) );
 	ОткрытьФорму ( "Справочник.ДополнительныеОтчетыИОбработки.Форма.ВыборОбработкиОтчета", п, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца );
	
КонецПроцедуры

&НаСервере
Функция ПодключитьВнешнююОбработкуОтчет ( ДополнительнаяОбработкаОтчет, Создание = Ложь ) Экспорт 
	
	спрОбъект = ДополнительнаяОбработкаОтчет.ПолучитьОбъект ();
	Если спрОбъект.ОбработкаОтчет = Перечисления.ОбработкаОтчет.Обработка Тогда
		менеджер = ВнешниеОбработки;
		префикс = "ВнешняяОбработка.";
	ИначеЕсли ( спрОбъект.ОбработкаОтчет = Перечисления.ОбработкаОтчет.Отчет ) Тогда 
		менеджер = ВнешниеОтчеты;
		префикс = "ВнешнийОтчет.";
	Иначе
		Возврат "";
	КонецЕсли;
	адрес = ПоместитьВоВременноеХранилище ( спрОбъект.ХранилищеФайла.Получить () );
	защита = Новый ОписаниеЗащитыОтОпасныхДействий ();
	защита.ПредупреждатьОбОпасныхДействиях = Ложь;
	имя = менеджер.Подключить ( адрес, , Истина, защита );
	Если ( Создание ) Тогда
		Возврат менеджер.Создать ( имя );
	Иначе
		Возврат ( префикс + имя );
	КонецЕсли; 

КонецФункции

Функция ПолучитьРасширениеФайла ( ИмяФайла ) Экспорт

	поз = 0;
	расширение = ИмяФайла;
	Пока Истина Цикл
		поз = СтрНайти ( расширение, "." );
		Если ( НЕ поз ) Тогда
			Прервать;			
		Иначе
			расширение = Сред ( расширение, поз + 1 );
		КонецЕсли;	
	КонецЦикла;
	Возврат ? ( расширение = ИмяФайла, "", НРег ( расширение ) );

КонецФункции

&НаКлиенте
Функция ИндексПиктограммы ( ИмяФайла ) Экспорт
	
	расширение = ПолучитьРасширениеФайла ( ИмяФайла );
	индекс = -1;
	Если ( Расширение = "gif" ) Тогда
		индекс = 48;
	ИначеЕсли ( Расширение = "jpg" ) Тогда
		индекс = 42;
	ИначеЕсли ( Расширение = "jpeg" ) Тогда
		индекс = 42;
	ИначеЕсли ( Расширение = "png" ) Тогда
		индекс = 50;
	ИначеЕсли ( Расширение = "tiff" ) Тогда
		индекс = 46;
	ИначеЕсли ( Расширение = "tif" ) Тогда
		индекс = 46;
	ИначеЕсли ( Расширение = "bmp" ) Тогда
		индекс = 44;
	ИначеЕсли ( Расширение = "pdf" ) Тогда
		индекс = 52;
	ИначеЕсли ( Расширение = "xml" ) Тогда
		индекс = 30;
	ИначеЕсли ( Расширение = "txt" ) Тогда
		индекс = 10;
	ИначеЕсли ( Расширение = "doc" ) Тогда
		индекс = 18;
	ИначеЕсли ( Расширение = "docx" ) Тогда
		индекс = 18;
	ИначеЕсли ( Расширение = "xls" ) Тогда
		индекс = 20;
	ИначеЕсли ( Расширение = "xlsx" ) Тогда
		индекс = 20;
	КонецЕсли;
	Возврат индекс;

КонецФункции

&НаКлиенте
Процедура ВыгрузитьФайл ( Адрес, ИмяФайла ) Экспорт
	
	диалог = ПолучитьДиалогПолученияФайлов ();
	НачатьПолучениеФайлаССервера ( Адрес, "", диалог );
			
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДиалогПолученияФайлов () Экспорт
	
	диалог = Новый ПараметрыДиалогаПолученияФайлов ();
	диалог.Заголовок = Сообщения.ТекстПоИД ( "ВыбратьФайл" );
	диалог.ВыборКаталога = Ложь;
	Возврат диалог;

КонецФункции

&НаСервере
Функция ПолучитьПапкуПоОбъекту ( Ссылка ) Экспорт
	
	мета = Ссылка.Метаданные ();
	имяПапки = "";
	слеш = РазделительОС ();
	Если ( Метаданные.Справочники.Содержит ( мета ) ) Тогда
		имяПапки = "Справочники" + слеш + мета.Имя + слеш + получитьИмяПоКоду ( Ссылка );
	ИначеЕсли ( Метаданные.Документы.Содержит ( мета ) ) Тогда
		имяПапки = "Документы" + слеш + мета.Имя + слеш + получитьИмяДляДокумента ( Ссылка );
	ИначеЕсли ( Метаданные.ПланыВидовХарактеристик.Содержит ( мета ) ) Тогда
		имяПапки = "ПланВидовХарактеристик" + слеш + мета.Имя + слеш + получитьИмяПоКоду ( Ссылка );
	КонецЕсли;
	Возврат имяПапки;

КонецФункции

&НаСервере
Функция получитьИмяПоКоду ( Ссылка )
	
	папка = "";
	Если ( Ссылка.Метаданные ().ДлинаКода = 0 ) Тогда
		данные = Запросы.ПолучитьРеквизиты ( Ссылка, "Наименование" );
		папка = данные.Наименование;
	Иначе
		данные = Запросы.ПолучитьРеквизиты ( Ссылка, "Код" );
		папка = данные.Код;
	КонецЕсли;
	Возврат папка;

КонецФункции

&НаСервере
Функция получитьИмяДляДокумента ( Ссылка )
	
	папка = "";
	данные = Запросы.ПолучитьРеквизиты ( Ссылка, "Номер, Дата" );
	папка = "" + данные.Номер + " " + Формат ( данные.Дата, "ДФ=dd.MM.yyyy" );
	Возврат папка;

КонецФункции

Функция РазделительОС () Экспорт
	
	Возврат ПолучитьРазделительПути ();

КонецФункции

Функция РазделительВЕБ () Экспорт
	
	Возврат "/";

КонецФункции

Функция ПолучитьИмяФайлаРасширение ( ИмяФайла ) Экспорт
	
	п = Новый Структура ();
	п.Вставить ( "Имя", ИмяФайла );
	п.Вставить ( "Расширение", "" );
	позиция = 0;
	п.Расширение = ИмяФайла;
	Пока ( Истина ) Цикл
		позиция = СтрНайти ( п.Расширение, "." );
		Если ( позиция = 0 ) Тогда
			Прервать;
		Иначе
			п.Расширение = Сред ( п.Расширение, позиция + 1 );
		КонецЕсли;
	КонецЦикла;
	Если ( п.Расширение = ИмяФайла ) Тогда
		п.Расширение = "";
	Иначе
		п.Имя = СтрЗаменить ( ИмяФайла, "." + п.Расширение, "" );
		п.Расширение = НРег ( п.Расширение );
	КонецЕсли;	
	Возврат п;

КонецФункции

#Область ВыборФайлов

&НаКлиенте
Процедура ВыбратьФайлы ( Параметры ) Экспорт
	
	оповещение = Новый ОписаниеОповещения ( "ПродолжитьЗагрузкуФайлов", ЭтотОбъект, Параметры );
    Подготовить ( оповещение );
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗагрузкуФайлов ( Результата, Параметры ) Экспорт
	
	диалог = ПолучитьДиалогЗагрузки ( Параметры );
	передНачалом = Новый ОписаниеОповещения ( "ПередНачаломЗагрузки", ЭтотОбъект );
    завершение = Новый ОписаниеОповещения ( "ЗавершениеЗагрузки", ЭтотОбъект, Параметры );
    прогресс = Новый ОписаниеОповещения ( "ХодЗагрузки", ЭтотОбъект );
    НачатьПомещениеФайловНаСервер ( завершение, прогресс, передНачалом, диалог, Новый УникальныйИдентификатор () );	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДиалогЗагрузки ( Параметры = Неопределено ) Экспорт
	
	диалог = Новый ПараметрыДиалогаПомещенияФайлов ();
	диалог.Заголовок = Сообщения.ТекстПоИД ( "ВыбратьФайл" );
	диалог.МножественныйВыбор = Ложь;
	Если ( Параметры <> Неопределено ) Тогда
		Если ( Параметры.Свойство ( "МножественныйВыбор" ) ) Тогда
			диалог.МножественныйВыбор = Параметры.МножественныйВыбор;
		Иначе
			диалог.МножественныйВыбор = Ложь;
		КонецЕсли;
		Если ( Параметры.Свойство ( "Фильтр" ) ) Тогда
			диалог.Фильтр = Параметры.Фильтр;
			диалог.ИндексФильтра = 0;
		Иначе
			диалог.Фильтр = Сообщения.ТекстПоИД ( "ФильтрВсеПоТипам" );
		КонецЕсли;		
	КонецЕсли;
	Возврат диалог;

КонецФункции

&НаКлиенте
Процедура ПередНачаломЗагрузки ( ПомещаемыеФайлы, Отказ, Параметры ) Экспорт
	
	максимум = 1024 * 1024 * 1024; // пока лимит в 1 ГБайт
	Для Каждого помещаемыйФайл Из ПомещаемыеФайлы Цикл
		размер = помещаемыйФайл.Размер ();
		Если ( размер > максимум ) Тогда
			Отказ = Истина;
			Сообщения.ПредупреждениеПоказать ( "ПревышениеРазмераФайла", Новый Структура ( "ИмяФайла", помещаемыйФайл.Имя ) );
		КонецЕсли;
	КонецЦикла;	
			
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗагрузки ( ОписаниеФайлов, Параметры ) Экспорт

	Если ОписаниеФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	файлы = Новый Массив ();
	Для Каждого описание Из ОписаниеФайлов Цикл
		п = Новый Структура ();
		п.Вставить ( "Адрес", описание.Адрес );
		п.Вставить ( "Имя", описание.СсылкаНаФайл.Имя);
		п.Вставить ( "Расширение", описание.СсылкаНаФайл.Расширение );
		п.Вставить ( "Размер", описание.СсылкаНаФайл.Размер () );
		файлы.Добавить ( п );
	КонецЦикла;
	данные = Новый Структура ();
	данные.Вставить ( "Файлы", файлы );
	ВыполнитьОбработкуОповещения ( Параметры.Оповещение, данные );
				
КонецПроцедуры

&НаКлиенте
Процедура ХодЗагрузки ( ПомещаемыйФайл, Процент, Отказ, ПроцентВсего, ОтказВсего, Параметры ) Экспорт

	Если ( ОтказВсего ) Тогда
		// код ...	
	Иначе
		с = Сообщения.ТекстПоИД ( "ЗагрузкаФайла", Новый Структура ( "Имя", ПомещаемыйФайл.Имя ) );
		пояснение = Сообщения.ТекстПоИД ( "РазмерФайла", Новый Структура ( "Размер", ПомещаемыйФайл.Размер () ) );
		Состояние ( с, ПроцентВсего, пояснение,  );
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлы ( Параметры ) Экспорт
	
	оповещение = Новый ОписаниеОповещения ( "ПродолжитьСохранениеФайлов", ЭтотОбъект, Параметры );
    Подготовить ( оповещение );	
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСохранениеФайлов ( Результат, Параметры ) Экспорт
	
	оповещение = Новый ОписаниеОповещения ( "НачалоПолученияФайлов", ЭтотОбъект ); 
	описание = Новый ОписаниеПередаваемогоФайла ();
	описание.Имя = Параметры.ИмяФайла;
	описание.Хранение = Параметры.Адрес;
	файлы = Новый Массив ();
	файлы.Добавить ( описание );
	режим = РежимДиалогаВыбораФайла.Сохранение;
	д = Новый ДиалогВыбораФайла ( режим );
	д.МножественныйВыбор = Ложь;
	д.Заголовок = Сообщения.ТекстПоИД ( "ВыбратьФайл" );
	Если ( Параметры.Свойство ( "Фильтр" ) ) Тогда
		д.Фильтр = Параметры.Фильтр;
	Иначе
		д.Фильтр = Сообщения.ТекстПоИД ( "ФильтрВсеПоТипам" );	
	КонецЕсли;
	д.ПолноеИмяФайла = Параметры.Имя + Параметры.Расширение;
	д.Расширение = Параметры.Расширение;
	НачатьПолучениеФайлов ( оповещение, файлы, д, Истина );  
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПолученияФайлов ( ПолученныеФайлы, Парамы ) Экспорт
	
	Сообщения.Оповещение ( "ФайлСохранен", , , "СохранениеФайла", БиблиотекаКартинок.Файлы48 );
	 	
КонецПроцедуры 

#КонецОбласти